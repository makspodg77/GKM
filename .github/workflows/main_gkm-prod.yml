name: Build and deploy Node.js app to Azure Web App - gkm-prod

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install and build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Create simple deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment

          # Copy backend files to deployment root
          cp -r backend/* deployment/

          # Copy frontend files to expected location inside deployment
          mkdir -p deployment/frontend/dist
          cp -r frontend/dist/* deployment/frontend/dist/

          # Create the exact path structure mentioned in the error
          mkdir -p deployment/home/site/frontend/dist
          cp -r frontend/dist/* deployment/home/site/frontend/dist/

          # Create a more robust frontend path patch
          echo '
          // Comprehensive patch for frontend path resolution
          const fs = require("fs");
          const path = require("path");

          // Save original function
          const originalPathResolve = path.resolve;
          const originalPathJoin = path.join;

          // Get list of directories to try
          const getPossibleFrontendPaths = () => [
            "/home/site/frontend/dist",               // The exact path from your error
            path.join(__dirname, "frontend", "dist"), // Relative to current script
            path.join(__dirname, "..", "frontend", "dist"), // Original expected path
            "/home/site/wwwroot/frontend/dist",       // Another possible Azure path
            process.cwd() + "/frontend/dist"          // Current working directory
          ];

          // Helper to find first valid path
          const findFirstValidPath = (paths) => {
            for (const p of paths) {
              try {
                if (fs.existsSync(p)) {
                  console.log(`✅ Found valid frontend path: ${p}`);
                  return p;
                }
              } catch (err) {
                console.log(`❌ Error checking path ${p}: ${err.message}`);
              }
            }
            
            console.warn("⚠️ No valid frontend paths found!");
            return null;
          };

          // Cache result for performance
          let VALID_FRONTEND_PATH = null;

          // Override path.resolve
          path.resolve = function(...args) {
            const original = originalPathResolve.apply(this, args);
            
            // Is this trying to resolve frontend path?
            if ((args.includes("frontend") && args.includes("dist")) || 
                original.includes("frontend/dist")) {
              
              console.log(`🔍 Path resolution intercepted: ${original}`);
              
              // Lazily initialize the valid path
              if (!VALID_FRONTEND_PATH) {
                VALID_FRONTEND_PATH = findFirstValidPath(getPossibleFrontendPaths());
              }
              
              // If we found a valid path, return it
              if (VALID_FRONTEND_PATH) {
                return VALID_FRONTEND_PATH;
              }
            }
            
            return original;
          };

          // Also override path.join for safety
          path.join = function(...args) {
            const original = originalPathJoin.apply(this, args);
            
            // Is this trying to join path to index.html in frontend?
            if (original.includes("frontend/dist/index.html")) {
              console.log(`🔍 Path join intercepted: ${original}`);
              
              // Lazily initialize the valid path
              if (!VALID_FRONTEND_PATH) {
                VALID_FRONTEND_PATH = findFirstValidPath(getPossibleFrontendPaths());
              }
              
              // If we found a valid path, return path to index.html
              if (VALID_FRONTEND_PATH) {
                return path.join(VALID_FRONTEND_PATH, "index.html");
              }
            }
            
            return original;
          };

          // Log available directories to help debugging
          console.log("📂 Current directory:", __dirname);
          console.log("📂 Directory contents:");
          try {
            fs.readdirSync(__dirname).forEach(file => {
              console.log(` - ${file}`);
            });
          } catch (err) {
            console.log(` Error reading directory: ${err.message}`);
          }
          ' > frontend-patch.js

          # Insert patch at beginning of index.js
          cat frontend-patch.js deployment/index.js > temp.js
          mv temp.js deployment/index.js

          # Copy web.config
          cp frontend/web.config deployment/ || true

      - name: Zip artifact
        run: |
          cd deployment
          zip -r ../release.zip ./*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_20C30292CDD74791B1E3568FE8908CF8 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_9307DE28C63743BEBB9D134647EACE07 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_D7C0CB3450AD437DA9C55B9CD1F03A3B }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "gkm-prod"
          slot-name: "Production"
          package: .
